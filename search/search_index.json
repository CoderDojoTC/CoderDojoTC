{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the CoderDojo Twin Cities Mentor Resources web site!</p> <p>The purpose of this site is to give mentors guidance on the resources available for you to be a great mentor. The table of content is listed in the margins of the web site.  Click on the left side links to navigate to the right section.</p> <p>Please let us know if you have any questions!</p> <p>Thanks! - The CoderDojo Twin Cities Mentoring Coordination Team</p>"},{"location":"badges/","title":"CoderDojoTC Badges","text":"<p>Here is the list of badges that we are creating, roughly in the order that they will be created.</p>"},{"location":"badges/#ai-racing-league","title":"AI Racing League","text":"<p>We did these badges in 2019 and they were a big hit.  They are 2.5 inches in both height and width. </p>"},{"location":"badges/#python","title":"Python","text":""},{"location":"badges/#scratch","title":"Scratch","text":""},{"location":"badges/#robots","title":"Robots","text":""},{"location":"badges/#arduino","title":"Arduino","text":""},{"location":"badges/#app-inventor","title":"App Inventor","text":"<p>Can we use a general mobile phone image?</p>"},{"location":"badges/#web","title":"Web","text":""},{"location":"badges/#java","title":"Java","text":""},{"location":"badges/#unity-game","title":"Unity Game","text":""},{"location":"badges/#linix","title":"Linix","text":""},{"location":"badges/#jupyter-notebooks","title":"Jupyter Notebooks","text":"<p>This is part of our Data Literacy project.  Data Literacy is one of the key skills requested by employers. Jupyter Notebooks are all written in Python, so students should have taken the intermediate Python labs before they do the Jupyter Notebooks labs.</p>"},{"location":"badges/#raspberry-pi","title":"Raspberry Pi","text":""},{"location":"badges/#ruby","title":"Ruby","text":""},{"location":"badges/#go","title":"Go","text":""},{"location":"badges/#mentoring","title":"Mentoring","text":""},{"location":"code-group-status/","title":"Code Group Content Status","text":"Name Lead Author Content Src Maturity Goal Complete Journey Map Notes Scratch Dan McCreary Custom Medium 8 8 Great for non-typers Beginning Python Dan McCreary Custom Mature 14 14 Journey Map Intermediate Python Zach and Parker Erickson Custom New 13 13 Hi demmand Advanced Python Parker Erickson and ? Custom New 10 2 many options Jupyter Notebooks Dan, Parker? Custom New 10 3 Hi demand in data literacy Beginning Arduino (Tinkercad) Dan McCreary Custom New 5 5 Tinkercad rocks! Most labs can be siumlated online. Intermediat Arduino (Tinkercad) Dan McCreary + Others Custom New 3 3 Lot of content to reformat Java Aaron K. Custom New 10 10 Hi interest.  Aaron using repl.it Linux and Pi ? Custom None 0 0 Difficult to move online Content Authoring with Markdown Dan McCreary Custom New 3 3 For mentors and teachers Tkinter Optum Staff Custom New 1 1 Building GUIs with Python Introduction to HTML GitHub Course External Mature 13 13 GitHub has mature content User Experience unknown Custom None 0 0 Need voluteer 3D Printing with Ender 3D Gerd? None working on goals Unity Game Engine Aaron Walker Custom None 1 0 Few maps to computational thinking. App Inventor unknown ? ? 0 0 0 0 Robots (MBot) Dan, Paith? Custom Medium 12 0 0 moving content over to mkdocs AI Racing League Dan McCreary Custom New 0 0 need help migrating content"},{"location":"code-groups/","title":"CoderDojo Twin Cities Coding groups","text":"<p>This guide describes all the coding groups at the CoderDojoTC.  You can use this list to:</p> <ol> <li>Understand what groups are best for beginning coders.</li> <li>Understand what topics each coding clubs cover.</li> <li>See age groups and experience levels that are most suited to each coding group.</li> <li>If the mentoring materials are available using our online-virtual Zoom based mentoring.</li> </ol>"},{"location":"code-groups/#scratch","title":"Scratch","text":"<p>Recommended for Ages: 7-14  Virtual Mentoring: Yes Just getting started with coding?  This is the first coding group we want you to consider. If is ideal if you don't yet have strong keyboarding skills or are using an iPad to learn coding.  For example can you use the copy/cut and paste functions without using the mouse?  Scratch is a  popular block programming language supported by MIT.  Students can build small programs just by placing blocks on the screen. You can learn more about scratch by visiting the CoderDojo and MIT  Scratch sites listed below:</p> <ul> <li>CoderDojoTC Scratch Resources for Students and Mentors</li> <li>MIT Scratch web site</li> </ul>"},{"location":"code-groups/#python","title":"Python","text":"<p>Recommended for Ages: 10-18 Virtual Mentoring: Yes If your student has strong keyboarding skills and has mastered the copy/cut and paste functions then we strongly recommend you start with Python.  Python has been the most popular introductory programming language since 2014 because it is has a clean syntax and there are many tools especially designed for beginners.  Our starting curriculum is based on the popular Trinket system used by many on-line coding clubs.  Trinket is fully web-based and does not require any software to be installed.  We also have many advanced Python labs and a gentle pathway to data literacy using Jupyter Notebooks.</p> <p>We have three different levels of Python programming:</p> <ul> <li>Introduction to Python covers how to use variables, loops, conditionals, functions, function parameters, lists, random numbers and recursion.  We use fun Turtle Graphics drawing in our classes to learn these concepts.  All these lessons can be done with just a web browser.</li> <li>Intermediate Python covers data types, data structures, variable scope, functions, function parameters, maps, files, modules, debugging, sorting, search and regular expressions.</li> <li>Advanced Python topics include objects, methods, data analysis, data quality, Jupyter notebooks, Python statistics libraries, data frames, plotting and chart and graphs, machine learning, TensorFlow, PyTorch and using GPUs to train your models.  Advanced Python mentoring frequently involves student driven projects and students usually create their own local programing environments on their local desktops.</li> </ul> <p>We have also created a new Journey Map for our most popular course, Introduction to Python.</p> <ul> <li>CoderDojoTC Python Resources for Students and Mentors</li> <li>Trinket</li> </ul>"},{"location":"code-groups/#web-and-user-experience","title":"Web and User Experience","text":"<p>Recommended for Ages: 10-18 Virtual Mentoring: Yes Creating web pages is a fun way to learn how to build great user experiences.  We have extensive materials and lesson plans for learning HTML, CSS, JavaScript and web drawing with SVG.  We use a variety of web-based tools to learn how to program with HTML, CSS, JavaScript and SVG.</p> <ul> <li>CoderDojoTC Web and UX Resources for Students and Mentors</li> </ul>"},{"location":"code-groups/#thunkable","title":"Thunkable","text":"<p>Recommended for Ages: 10-18 Virtual Mentoring: Yes Thunkable is a new web-based block programming tool that allows students to build both iPhone and Android applications.</p> <ul> <li>Thunkable Resources for Students and Mentors</li> </ul>"},{"location":"code-groups/#mbot-robots","title":"MBot Robots","text":"<p>Recommended for Ages: 10-14 Virtual Mentoring: Only If Students Have Their Own MBot MBots are low-cost ($60) robots that can be programmed using Scratch block programming.  In order to use this material students should have the MBots in their homes.</p> <ul> <li>Resources for MBot Students and Mentors</li> </ul>"},{"location":"code-groups/#arduino","title":"Arduino","text":"<p>Recommended for Ages: 10-18 Virtual Mentoring: Yes  Want to control things in the real world like lights and sensor with computer programming? In this group, you\u2019ll go step-by-step, connecting lights, sensors, motors and displays using an Arduino. No prior programming experience is needed!</p> <p>We are excited to announce that despite COVID-19 and our migration to on-line only Zoom based classes, we are still able to teach Arduino classes!  We are doing this by using on-line Arduino simulators with TinkerCad Circuits that only require a web browser.  No local Arduino hardware is required!  This means that students can learn how to write code with Arduino without hardware and then when they are ready purchase their own hardware and move their code from the virtual world to real physical hardware.</p> <p>Arduino Resources for CoderDojo Mentors and Students</p>"},{"location":"code-groups/#arduino-led-costumes","title":"Arduino LED Costumes","text":"<p>Recommended for Ages: 10-18 Virtual Mentoring: Yes LED Strip labs GitHub Pages yet to be moved to mkdocs. Moving Rainbow Ages: 12-18</p>"},{"location":"code-groups/#arduino-robots","title":"Arduino Robots","text":"<p>Recommended for Ages: 10-18 Arduino Robot Content yet to be moved:  Arduino Robots Site Ages: 12-18</p>"},{"location":"code-groups/#linuxunix-and-pi","title":"Linux/UNIX and Pi","text":"<p>Recommended for Ages: 13-18</p> <p>Warning</p> <p>We have not moved our Raspberry Pi programming on-line yet.  If you have ideas on how to do this, please let Dan McCreary know.</p> <p>Students that want to do work with the Raspberry Pi often need to understand basic UNIX commands and basic UNIX shell programming.  We are working on putting these materials on line. Ages: 12-18</p>"},{"location":"code-groups/#unity-game-engine","title":"Unity Game Engine","text":"<p>Warning</p> <p>Our Unity Game Engine courses have not been moved online.  They require extensive desktop setup and many of our students don't have high-end system that are required to run Unity.  We hope to resume Unity when we return to our physical classrooms.</p> <p>Unity Game Engine Enjoy making games and sophisticated graphics with professional level software.  Best for ages 10+ or experienced younger coders. Ages: 12-18</p>"},{"location":"code-groups/#ai-racing-league","title":"AI Racing League","text":"<p>Recommended for Ages: 14-18</p> <p>Warning</p> <p>Our AI Racing League courses have not been moved online.  We know of other DonkeyCar clubs that are now doing \"virtual races\" but we don't have the experienced volunteers to migrate our content.</p> <p>Learn the principals of machine learning and Artificial Intelligence by training a small car to drive around a track by itself.  This popular project is build around the DonkeyCar system and our volunteers are working hard to make the cars easier for everyone to learn.  Some experience with Python and UNIX is very helpful.  We are also looking for mentors to help us migrate the existing Markdown content to use the mkdocs standards.</p> <ul> <li>CoderDojo TC AI Racing League Resources</li> </ul>"},{"location":"code-groups/#java","title":"Java","text":"<p>Warning</p> <p>Due to reliability problems with our on-line Repl.io Java VM engines we are not teaching Java in our Zoom-based classes at this time.  Mentors and students are welcome to use the material we have created with the understanding that students will need to load Java development tools on their local desktops.  If you have suggestions on how to teach Java without local installation of software please let us know.</p> <p>Java - Java is suggested after students have mastered Python concepts.  Getting started with Java is a bit more challenging since even small programs require more code and a deeper understanding of complex programming concepts.  We are still working on finding instructors and materials for Java.  Stand by for more. Ages: 14-18</p>"},{"location":"code-groups/#app-inventor","title":"App Inventor","text":"<p>Warning</p> <p>We are migrating our mobile application development to Thunkable.  The primary reason for this is that Thunkable works on both iPhone and Android and our younger students like the block-programming capability offered by Thunkable.  Our virtual training also allows us to not have to install local applications on the students local system.</p> <p>The App Inventor content will not be maintained in the future.</p> <p>App Inventor Learn how to build your own mobile apps (Android only) with AppInventor, a powerful, visual programming tool from MIT. Technovation Coding Lab 1: Choose your App Builder Technovation Coding Lab 2: Algorithms and Pseudocode Technovation Coding Lab 3: Event Handlers Technovation Coding Lab 4: Data and Functions Technovation Coding Lab 5: Variables Technovation Coding Lab 6: Lists Technovation Coding Lab 7: If/Else Conditional Statements Technovation Coding Lab 8: If / Else / Else If Conditionals Technovation Coding Lab 9: Advanced Logic and Conditionals Technovation Coding Lab 10: Loops Technovation Coding Lab 11: Using Sensors and Components in App Inventor and Thunkable Technovation Coding Lab 12: Storing Data Locally Technovation Coding Lab 13: Storing Data in the Cloud and APIs Technovation Coding Lab 14: Debugging Tips in App Inventor and Thunkable Technovation Coding Lab 15: Flowcharts Technovation Coding Lab 14: Debugging Tips in App Inventor and Thunkable Ages: 12-18</p>"},{"location":"code-of-conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the project community.</p>"},{"location":"code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"computational-thinking/","title":"Computational Thinking","text":"<p>Computational thinking is a name we give to describing the underlying patterns that guide the development of computer science curriculum.</p> <p>There are four key patterns that are frequently discussed when we talk about computational thinking.</p> <ol> <li>abstraction \u2013 focusing on the important information only, ignoring irrelevant detail.</li> <li>algorithms - developing a step-by-step solution to the problem, or the rules to follow to solve the problem.</li> <li>decomposition - breaking down a complex problem or system into smaller, more manageable parts.</li> <li>pattern recognition \u2013 looking for similarities among and within problems.</li> </ol> <p>We have to added the concept of expandability and bias to these concepts:</p> <ol> <li>explainability - can a computer explain why it took a specific action or made a specific recommendation?</li> <li>bias - is the result of the suggestion made by a computer skewed in a direction that makes it unfair to a group of people?</li> </ol>"},{"location":"computational-thinking/#other-common-design-patterns","title":"Other Common Design Patterns","text":"<p>Although we have many different coding groups that are appropriate for beginners, there are several computer science concepts that we encourage everyone to adopt in your coding group curriculum.</p> <p>Events - What events start a program?  What events change the behavior of a program?</p> <p>Loops - How do repeat a set of tasks?</p> <p>Variables - How do we reference a common value and make our programs easier to change?</p> <p>Conditionals - How do we change program behavior based on rules.  How do we use comparisons to do this?  How do we implement if/then/else or switch/case logic to be easy to understand and maintain?</p> <p>Functions - How do we group code sections together and give them names?</p> <p>Function Parameters - How do we pass values to functions? How can parameters make functions more widely reusable? Why would we want to check the types of an input parameters?  What happens when we pass invalid data types to a function?</p> <p>Data types - What is the difference between a string of characters, an integer, a floating point number or a datetime?  How do we use the right datatype and type checking to keep our programs reliable?</p> <p>Data Structures - How do you create and manage lists, dictionaries, arrays and complex data structures?</p> <p>Sensors - How do we gather input from the real world?</p> <p>Output - How do we display text or graphic output on a small display screen or print statements to a serial console for debugging?</p> <p>Feedback - how do we prompt users for input and respond to changes in output</p> <p>Debugging - How do we find problems in our code?  How can we stop execution of our code using a debugger?  How do we inspect the value of variables when a program has paused?</p> <p>Drawing - Drawing to a graphics device is a great way to learn other concepts where you get quick visual feedback.  Drawing can be our on ramp to drawing charts and graphs.  See our SVG Labs for excellent examples of learning to program with graphics.</p> <p>Recursion - What happens when a function calls itself?  How can you draw trees that have many smaller branches?</p> <p>Commenting - How do we put hints in our code for others to better understand our code?  How do comments make code more maintainable?</p> <p>Scope - How do we protect variables from unintended updates?  How do we use global variables sparingly.  How do we use local variables and when should move variables from global to local or vice versa?</p>"},{"location":"computational-thinking/#advanced-concepts","title":"Advanced concepts","text":"<p>Here are a few topics that you can explore with your move advanced students.</p> <p>Files - How do we read data in from files and write data out to files?  How do we append to the end of files?</p> <p>Regular Expressions - How do we use a short set of special characters to look for patterns in strings and text?</p> <p>Integrated Development Environments - How do we setup our desktop so that we can be productive debugging our programs?  What is syntax highlighting?  What is autocomplete?</p> <p>Logging - How do we keep a record of what has happened in our programs?</p>"},{"location":"contact/","title":"Contact Us","text":"<p>To contact us please send an e-mail to:</p> <p>hello@coderdojotc.org</p>"},{"location":"content-authoring-guide/","title":"CoderDojo Content Authoring Guide","text":"<p>When our CoderDojo clubs were just getting started we struggled to find high-quality content that was age appropriate for our students.  We learned of the CoderDojo international foundation used simple laminated Concept Cards</p>"},{"location":"content-authoring-guide/#our-current-coderdojotc-content-publishing-stack","title":"Our Current CoderDojoTC Content Publishing Stack","text":""},{"location":"content-authoring-guide/#markdown","title":"Markdown","text":"<p>We use Markdown for all our content.  A good way to learn Markdown is to use a Markdown cheat sheet.  We want you to put many images into your classes so make sure to use the image links!</p>"},{"location":"content-authoring-guide/#github-for-source","title":"GitHub for Source","text":"<p>We use GitHub to store our content.  GitHub is free for all public content and has many advanced features that allow team to work together to build and test learning content.  Many of our content authors are familiar with GitHub.</p>"},{"location":"content-authoring-guide/#github-pages-for-web-sites","title":"GitHub Pages for Web Sites","text":"<p>We use GitHub Pages to publish our content to microsites.  Each coding group has their own microsite and search does not currently work across the microsites (we are working on fixing this). All content should be published into a gh-deploy branch.  If you change content using the web-based editor (the pencil in the upper right corner of the github page viewer - you may need to have a friend help republish the content to the GitHub Pages site.)</p>"},{"location":"content-authoring-guide/#mkdocs-for-publishing","title":"MkDocs for Publishing","text":"<p>We use mkdocs for our publishing tool.  This converts our Markdown pages into HTML web sites.  To deploy mkdocs you will need to have python installed on your local computer.  You must run the \"mkdocs gh-deploy\" command every time you make changes.</p>"},{"location":"content-authoring-guide/#google-material-user-interface-components","title":"Google Material User Interface Components","text":"<p>We use the mkdocs material theme.  We encourage you to learn to add custom material widgets to your content.</p>"},{"location":"content-authoring-guide/#coderdojo-style-guide","title":"CoderDojo Style Guide","text":"<p>We use CoderDojo style guide for our colors, icons and fonts.  Please try to stay close to these guidelines so that mentors, parents, and students all know they are on a kid-safe site.</p> <p>We like our lesson plans to start with an image, gif or short video clip (under 10-seconds).</p>"},{"location":"content-authoring-guide/#setting-up-a-virtual-environment-with-conda","title":"Setting Up a Virtual Environment with Conda","text":"<p>This section is for programmers that are setting up \"build\" systems on their desktops to automate the mkdocs publishing process.  If you are new to Python and Conda virtual environments, please ask for help!  This is not as easy is it looks, especially on Windows systems.</p> <p>First, follow the installation instruction on the Conda web site:</p> <p>Conda Virtual Environment Shell Installation</p> <pre><code>$ conda create --name  mkdocs python=3.6\n$ conda activate mkdocs\n$ pip install mkdocs\n$ pip install mkdocs-material\n</code></pre> <p>If you are also installing quizzes on your microsite you will need additional steps not included here.</p>"},{"location":"content-authoring-guide/#add-the-site-dir-to-your-gitignore","title":"Add the site dir to your .gitignore","text":"<p>The mkdocs process takes Markdown files and converts them to HTML.  These files are put into a folder called <code>site</code>.  However, to publish we push this folder to the <code>gh-deploy</code> branch.  To keep the site directory from being pushed to the main branch we need to add the directory to the .gitignore file:</p> <p>Contents of .gitignore</p> <pre><code>site\n.DS_Store\n~$*\n</code></pre> <p>Try to avoid links to resources that are not kid-safe.</p> <p>By using these standards it will enable us to reuse this content for search, recommendation and building tools that allow students to use chatbots to help them code.</p>"},{"location":"content-authoring-guide/#images","title":"Images","text":"<p>All images should be stored in the doc/img directory in your site.  Please keep images reasonably small (under 50K) to keep the load times fast.</p>"},{"location":"content-authoring-guide/#navigation","title":"Navigation","text":"<p>Make sure when you add a new content file you link it into the navigation menu.  Try to keep navigation lists under 30 items.  Try using nesting if your lists get too long.</p>"},{"location":"content-authoring-guide/#mkdocs-commands","title":"Mkdocs commands","text":"<p>There are only four mkdocs commands.  You will rarely need to use the new command.</p>"},{"location":"content-authoring-guide/#mkdocs-build","title":"mkdocs build","text":"<p>Build the MkDocs documentation.  We use this to test at the nav pages all match a document. If you get error messages in the build process you work on fixing them until the build does not return any errors.</p>"},{"location":"content-authoring-guide/#mkdocs-gh-deploy","title":"mkdocs gh-deploy","text":"<p>Deploy your documentation to GitHub Pages.  Run this when you want to take your local changes and push them to the web site.</p> <p>Here is an example of this run:</p> <pre><code>$ mkdocs gh-deploy\nINFO    -  Cleaning site directory \nINFO    -  Building documentation to directory: /Users/dmccrea1/Documents/ws/CoderDojoTC/site \nINFO    -  Documentation built in 0.90 seconds \nINFO    -  Copying '/Users/dmccrea1/Documents/ws/CoderDojoTC/site' to 'gh-pages' branch and pushing to GitHub. \nINFO    -  Your documentation should shortly be available at: [https://CoderDojoTC.github.io/CoderDojoTC](https://CoderDojoTC.github.io/CoderDojoTC)\n</code></pre>"},{"location":"content-authoring-guide/#mkdocs-new","title":"mkdocs new","text":"<p>Create a new MkDocs project.  Most of our mentors will not need to do this.  We will supply you with a template zip file with all the right content if you need to create a new CoderDojo microsite of your own.</p>"},{"location":"content-authoring-guide/#mkdocs-serve","title":"mkdocs serve","text":"<p>Run the builtin development server and display the web site on your local computer.  This is a great way to quickly check your changes since the server watches for any file changes and immediately updates the web page.</p>"},{"location":"content-authoring-guide/#material-examples","title":"Material examples","text":"<p>We chose the Google Material theme because there are tens of thousands of components you can add to your pages.  You can get a sample of them here:</p> <p>Material Components </p>"},{"location":"content-authoring-guide/#embedding-videos","title":"Embedding Videos","text":"<p>We strongly encourage some movement in short 10-second demos using videos.</p> <p>To embed a YouTube video do the following</p> <ol> <li>Use the Share button</li> <li>Select the Embed option</li> <li>Copy the iFrame code and paste it into your MarkDown</li> <li>Add the <code>?rel=0</code> link which will only put your own related videos on the More Video when the video is done playing.</li> </ol> <p>See YouTube Embed Option for Related Videos Changes for details.</p>"},{"location":"designing-concept-cards/","title":"Concept Cards","text":"<p>Dan McCreary Version 1.1 \u2013 last updated September, 2021</p>"},{"location":"designing-concept-cards/#what-are-concept-cards","title":"What are Concept Cards?","text":"<p>Concept Cards are teaching tools that are popular in informal hands-on settings such as CoderDojo classrooms.  Concept cards follow the \"one concept per card\" rule.  Each card attempts to illustrate one-and-only-one concept using a simple example.  Within the CoderDojo mentoring system, Concept Cards also called \"Sushi Cards\" in the CoderDojo mentoring system, representing a single bite of knowledge.  Concepts are communicated in easy-to-digest, bite-sized chunks (hence Sushi).</p> <p>Concept Cards are a way of taking complex topics and decomposing the topics into simple examples that can be used to illustrate the principals needed to master the topic.</p> <p>Concept Cards can be used in multiple teaching styles includeing goal-directed learning, fixed hierarchy learning and ad-hoc rhizomatic network learning.</p>"},{"location":"designing-concept-cards/#when-should-concept-cards-be-used","title":"When Should Concept Cards be Used?","text":"<p>Concept Cards are ideal for situations where students may not have one-on-one time with a teacher or mentor. Concept Card facilitate self-guided instruction without having to pick up a 300-page book where you must to start on page one and learn the material sequentially. We like to think of them as \"Agile Teaching\" tools where there are multiple entry points into learning and multiple possible outcomes.</p> <p>We like to use a library of Concept Cards when the requirements of your classrooms may be constantly changing. If designed correctly, concepts cards allow you to remix concepts to adapt to different students, projects and educational events.</p>"},{"location":"designing-concept-cards/#design-goals","title":"Design Goals","text":"<p>Breaking complex topics down into many small concepts is a universal strategy in designing any curriculum.  We often call this process decomposition.  Having a good set of concepts can promote building flexible data structures that are used in learning management systems. Sometimes designing a graph of interrelated concepts is a first step in building these systems.  Once we have a list of concepts with their dependencies we can then focus on designing the content to teach these concepts.</p> <p>We now suggest some guidelines for the creation of concept cards for CoderDojo classrooms.</p>"},{"location":"designing-concept-cards/#guideline-1-one-card-one-concept","title":"Guideline 1: One Card, One Concept","text":"<p>Each Concept Card should teach one important concept. What is an important concept? That's the tricky bit!  And that's for the Card designer to decide. There is no scientific way of defining this.  Sometimes a Concept can be associated with a specific physical demonstration or \"lab\", like What is a Raspberry Pi Pico microcontroller?  Sometimes they are associated with a program, like the UNIX shell command, and sometimes Concept Cards are associated with a programming concept like a \"conditional\" statement or a \"for loop\".</p> <p>Ideally, Concept Cards should be related to a piece of hardware, a program, a function or a small sample of code that illustrates the principle as simply and clearly as possible. Don't be tempted to add in 'side' lessons that show something else. Instead, make these into separate cards. Side concepts may be interesting to you, but you must resist the temptation to deviate from the concept.  Let your students take simple samples, master them and allow them to be the integrators of the concepts to produce working programs.</p>"},{"location":"designing-concept-cards/#types-of-concept-cards","title":"Types of Concept Cards","text":"<p>Although we try to avoid strict hierarchial curriculum in our CoderDojo classrooms, we still must take into account that not all Concept Cards are the same. Some cards depend on other cards.  Grouping cards into difficulty categories is a way to guide students without forcing structure.</p> <p>Concept cards are often divided into multiple difficulty levels like the following:</p> <ul> <li>Beginning - where a concept does not depend on any other concepts in your curriculum</li> <li>Intermediate - where a concept might depend on one or more Beginning concept</li> <li>Advanced - where a concept depends on one or more intermediate concepts</li> </ul>"},{"location":"designing-concept-cards/#designing-colorful-laminated-concept-cards","title":"Designing Colorful Laminated Concept Cards","text":"<p>Like many communication tools, designing concept cards reflect that the medium is the message.  How we print and display Concept Cards makes a big difference in their effectiveness.</p> <p>Imagine a new CoderDojo student walking into a classroom.  Computer are often spread around the edges and back of the classroom.  But near the entrance to the classroom is a table covered with small 5X10 inch laminated cards. The cards each have a colorful border indicating their difficulty, and every card has an image that can quickly be recognized by returning students.</p> <p>We often use two-sided laminated cards that are easy to hold in one hand and easy to view by the side of a computer.   The structure of the cards is important because they don't look intimidating.  They are not walls of text and they don't look like a college textbook.</p> <p></p> <p>In contrast, the book Learning Python by Mark Lutz is a 1,600-page book that had detailed discussions areas of Python that many programmers may never need.  The chapter on the \"if\" statement does not even start until page 383!</p> <p>We want Concept Cards to look a bit like a stack of colorful playing cards, not a 1,600 page college computer science textbook. Learners can move at their own pace and there is never the suggestion that only those patient enough to read a 1,600 page textbook are allowed to participate.  You can easily place the card next to a piece of hardware or laptop.</p> <p>For instance, if they\u2019re learning UNIX, they\u2019ll probably have three or four windows open \u2013 so having another open to show the class notes is contributing to serious window management problems.</p>"},{"location":"designing-concept-cards/#lamination","title":"Lamination","text":"<p>Plastic lamination will save you time and money. Laminators cost around $50. The individual laminating pouches are less than 10 cents each. Once you\u2019ve produced your laminated sheet it will last for many weeks of CoderDojo sessions, in contrast to paper handouts which are usually discarded after one or two CoderDojo sessions.</p>"},{"location":"designing-concept-cards/#test-test-test","title":"Test, test, test","text":"<p>(practice-led, not theory-led) Because every audience is different, you can't really predict if cards will work for any audience.  The approach is practice-led rather than theory-led so that learners see results as fast as possible. We think this mirrors the way most programmers learn anyway. (First, take some existing code and hack it, read up the theory only if you can\u2019t figure out what\u2019s going on \u2026)</p>"},{"location":"designing-concept-cards/#keep-examples-short-and-sweet","title":"Keep examples short and sweet","text":"<p>Any example code should be as short as possible (to minimize mistyping) and should be as easy to understand as possible \u2013 make examples as concrete as you can. Using self-descriptive variable and parameter names is helpful (good programming anyway).</p>"},{"location":"designing-concept-cards/#dont-feel-you-have-to-explain-everything","title":"Don\u2019t feel you have to explain everything","text":"<p>Don't feel you have to explain everything \u2013 it's often better to show some self-descriptive code and then ask the learner the question 'can you figure out what this is doing?' or 'how would you change this to do X'. You\u2019re pointing learners in the right direction, but you're not watching over them for the whole journey. Also \u2026 improvisation should be encouraged. Learning examples should be presented in such a way that the learner can riff on the examples and quickly produce new materials that showcase their own interests.</p>"},{"location":"designing-concept-cards/#cards-should-be-self-contained","title":"Cards should be self-contained","text":"<p>Although the lessons should be built on one another, individual cards should still be fairly self-contained. In the HTML example it's necessary to do the first two or three cards in order, but after the learner has created a basic site card it could be picked up in any order. (Although to make this work, you may need to revisit earlier cards after you add in a later card).</p>"},{"location":"designing-concept-cards/#pictures-are-good","title":"Pictures are Good","text":"<p>Having the materials look inviting is important. The best practice is to have a friendly, not-too-complex, yet colorful picture at the top of each card just below the concept name.  We try to show an end-result that looks exciting and makes learners want to dive in. Try to avoid having English in your pictures due to hassle made when translating to other languages.</p>"},{"location":"designing-concept-cards/#the-cards-will-never-be-perfect-dont-worry","title":"The cards will never be perfect \u2013 don\u2019t worry!","text":"<p>Whenever you work with learners and use the cards, you\u2019ll quickly come across all sorts of errors, imperfections and barriers to comprehension. But don\u2019t worry about it. It\u2019s normal. Just go home and modify them. Each change you make will make the cards easier to use.</p>"},{"location":"designing-concept-cards/#sample-concept-card-structure","title":"Sample Concept Card Structure","text":""},{"location":"designing-concept-cards/#front-material","title":"Front Material","text":""},{"location":"designing-concept-cards/#difficulty","title":"Difficulty","text":"<p>The outer border of the card should show the difficulty level using a bright color.  We use green for beginning concepts, blue for intermediate concepts and black for advanced concepts.  Also use text because some students may be color blind.</p>"},{"location":"designing-concept-cards/#concept-name","title":"Concept Name","text":"<p>Try to use a short kid-friendly name and avoid technical jargon if possible</p>"},{"location":"designing-concept-cards/#concept-picture","title":"Concept Picture","text":"<p>A small image or icon that students will remember if they have seen it before.  Imagine students all arriving in a room and quickly discarding cards they have already done but putting their focus on new concept cards.</p>"},{"location":"designing-concept-cards/#activity-challenge","title":"Activity Challenge","text":"<p>A short list of activities that the students might try.  Give them hints at the very bottom of the card if they are hard challenges.</p>"},{"location":"designing-concept-cards/#back-material","title":"Back Material","text":"<p>** Activity Answers - A short list answer to the challenges on the front of the card ** ** Explorations** - More ways to learn more about a concept or related Concepts</p>"},{"location":"designing-concept-cards/#concept-card-design-tips","title":"Concept Card Design Tips","text":"<p>Use colors and paragraphs to prevent a \"wall of text\" that will turn students away.  Put in a colorful icon in the text or use bold/italic or colors to highlight words.  Use icons, graphics, figures, photos, lists or tables to break up text.</p> <p>Large blocks of text can be intimidating to readers and tough to read for all. Look at the examples for reference for a good sushi card in terms of text readability.</p> <p>Visit http://dojo.soy/style for guidelines to aim for.</p> <ul> <li>You can remind them to ask for a mentor if installing something is too hard</li> <li>Add important Terms in colored boxes</li> <li>Historic tips are welcome, fun facts too</li> <li>Bold terms like copy, paste, click, keyboard buttons etc. (any words that's used a lot and has either been defined or is common computing terms)</li> <li>Instructions should work for both PC and Mac</li> <li>Appropriately colored boxes break the wall of texts and make the text less daunting. There should be at least one yellow box or screenshot on each page. Use this to explain key concepts in simple language.</li> <li>Always try to end the back of a card with play around with other challenges. i.e. making music with a Raspberry Pi, a game in Python, a webpage in HTML/CSS. Encourage them to tweak and explore what they've done.</li> <li>Needless to say, a child will not understand a lot of big words. Use basic language and don't make a comparison to something they wouldn't understand like a bank or job</li> <li>Test your card by watching kids pick them up and try them.  Don't try for perfection on the first pass.  Get it out there and iterate, iterate, iterate...</li> <li>Get feedback from other mentors and teachers</li> </ul>"},{"location":"designing-concept-cards/#sample-concept-form","title":"Sample Concept Form:","text":"<p>Concept Difficulty Level: Beginner, Intermediate or Advanced (use this to change the color of the border)</p> <p>Concept Name: _____</p> <p>Concept Picture:</p> <p>Concept Description:</p> <p>Optional: Predecessor Concepts</p> <p>Successor Concepts</p> <p>Activity Challenge Text:</p> <p>Concept Answers (often printed on the back of the card)</p> <p>More to Explore:</p>"},{"location":"glossary/","title":"CoderDojo Content Authoring Glossary of Terms","text":""},{"location":"glossary/#build-process","title":"Build Process","text":"<p>A standardized process of compiling and transforming various structures to produce usable artifacts.</p> <p>Within CoderDojoTC authoring system to convert Markdown format into HTML.</p> <p>A sample of the build process is shown in the figure below:</p> <p></p>"},{"location":"glossary/#concept-cards","title":"Concept Cards","text":"<p>Small laminated cards that sit on central tables that are visible as students walk into a CoderDojo classroom. Students quickly scan the tables for new concepts they want to learn, pick up the cards and then go to a computer workstation to learn the concepts.</p> <p>Concept Cards (also known as Sushi Cards) contain a single concept that students can learn.</p> <p>See the document Designing Concept Cards for details.</p> <ul> <li>Also known as: Sushi Cards</li> </ul>"},{"location":"glossary/#concept-glossary","title":"Concept Glossary","text":"<p>A web page or set of web pages that display the key concepts for a coding group.</p> <p>Mentors can quickly review concepts with students to check what concepts they are familiar with before we begin our mentoring sessions.</p> <p>Concept glossaries are also designed to work with Concept Cards and each concept can be easily linked from our standardized Markdown formats.</p> <p>In addition to publishing easy to use concept cards, CoderDojoTC is building an integrated network of concepts for teaching computer science.  Many of our content sites are building concept glossary pages which are initially flat lists of concepts for a topic.  </p>"},{"location":"glossary/#markdown","title":"Markdown","text":"<p>A lightweight markup language that you can use to add formatting elements to plaintext text documents.</p> <p>Markdown is the most popular format used by software developers for creating and maintain web content and documentation.</p> <p>In 2020, all our CoderDojoTC content started being migrated to standardized Markdown formats.  We use mkdocs to tranform Markdown into HTML for publishing our content.</p> <ul> <li>See also: Markdown web site</li> <li>See also: mkdocs</li> </ul>"},{"location":"glossary/#material","title":"Material","text":"<p>A open source design system that helps teams build high-quality digital experiences.</p> <p>Material is not just a web user interface library.  It attempts to cover high-level visual presentation guides for multiple media including mobile, web and other visual experiences.</p> <p>Material was originally created by Google and then donated to the open source community.</p> <p>In 2020, CoderDojoTC content authors voted to standardize on using Material and Material Components for all our content sites.</p> <ul> <li>See also: Material for mkdocs</li> </ul>"},{"location":"glossary/#material-components","title":"Material Components","text":"<p>A library of user interface components that use the Material style guidelines.</p> <p>In 2020, CoderDojoTC content authors voted to standardize on using Material Components for all our content sites.</p> <ul> <li>See also: Material Components</li> </ul>"},{"location":"glossary/#mkdocs","title":"mkdocs","text":"<p>A python-based build system that converts Markdown format into HTML format within a web site.</p> <p>Mkdocs is powerful, extensible and widely used by software developers to maintain documentation.</p> <p>Mkdocs also builds index files that allow every site to have it's own mini-search system without depending on expensive search indexing servers.</p> <ul> <li>See: mkdocs web site</li> </ul>"},{"location":"journey-maps/","title":"Journey Maps for Online Courses","text":"<p>Keeping students focused is a key problem in online courses.  This document describes how we can use visual journey maps to keep online students focused on their goals.  This document is divided into two parts.  Part 1 describes what Journey Maps are and how they are used in our virtual CoderDojo mentoring sessions.  Part 2 targets at our mentors that are also helping create learning content and the colorful Journey Maps that go along with these courses.</p>"},{"location":"journey-maps/#part-1-using-journey-maps-with-coderdojo-students","title":"Part 1: Using Journey Maps With CoderDojo Students","text":""},{"location":"journey-maps/#what-are-journey-maps","title":"What are Journey Maps?","text":"<p>In a general sense, Journey Maps are a visualization of the process that a person goes through to accomplish a goal.  Journey Maps are used extensively by experts in the field of User Experience Design (UX).  In the context of developing virtual mentor assisted courses, we can use them as a way of keeping our students engaged, directing their focus toward a goal, and quickly reviewing out where students left off after a prior mentoring session with another mentor.</p>"},{"location":"journey-maps/#classroom-feedback-vs-online-distractions","title":"Classroom Feedback vs Online Distractions","text":"<p>One of the challenges of online mentoring is keeping our students on track.  In a physical CoderDojo classroom when there are multiple students working together on a common goal, students observe each other working on projects. This feedback keeps them focused on reaching their educational goals.  Experienced teachers leverage the research on Social constructivism in their course design.</p> <p>However, when we design online courses used in the home environment we don't have the luxury of these feedback systems to keep our students focused on reaching their learning goals.  There may be many distractions - other siblings, background TV noise, and other interruptions that our online mentors can see and can't control.  So to be successful we need to design courses to keep our students on task and bring them back to their learning objectives when they are distracted.</p> <p>One of the ways we can keep students focused is to create a clear mental model of the \"map\" of a course and then reinforce this map repeatedly until we reach the end of the course.  In a high-school or college course we have are often presented with a syllabus of the first day of a course.  This document is a lesson-by-lesson guide of the course so you can show students, administrators, and colleagues what we plan to teach in a course.  In our CoderDojo online mentoring sessions we can also use a graphic version of a syllabus to begin our sessions.  For our younger students we also want to make this document more fun and interactive.  We will call this document our Learning Journey Map.</p> <p>Creating a single page \"map\" allows our students to orient themselves using the same neural pathways they use when we walk around our home or their neighborhood.  Research has shown  that creating these maps help us use specialized Gird Cells in our brain to orient ourselves and do planning.</p> <p>## The Learning Journey Map A CoderDojo Online Learning Journey Map is a colorful single-page view of our course.  It is designed to be printed out on an 8.5X11 landscape piece of paper so that students can have it next to their computer and see where they are in the course.  The Journey Map allows them to both and see their progress toward reaching an objective.  It shows them what they have accomplished and what they still need to learn.</p>"},{"location":"journey-maps/#the-components-of-a-journey-map","title":"The Components of a Journey Map","text":"<p>A Learning Journey Map has a clearly defined starting point, usually in the upper-left corner of the screen and a destination, often placed at the lower-right corner of the screen.  Each lesson is a waypoint on the road between the start and the end of the map.  A typical CoderDojo Online Journey map has between six and 20 lessons and is typically designed to take 2 to 3 1-hour sessions with an online mentor.</p>"},{"location":"journey-maps/#part-2-creating-great-journey-maps","title":"Part 2: Creating Great Journey Maps","text":"<p>Now we want to focus on some of the design techniques that we want to use to create engaging Journey Maps for our CoderDojo online courses.  First, lets start with a basic boring Journey Map and then see how we can improve it to increase engagement.</p>"},{"location":"journey-maps/#a-boring-journey-map","title":"A Boring Journey Map","text":"<p>Here is an example of a boring journey map template:</p> <p></p> <p>Although we have a nice icon for the Start and Finish locations, the rest of the diagram is very plain.  There is no use of color and all the shapes are the same.  The journey map does not present a sense of adventure, challenges, and overcoming the challenge of learning new complex concepts.  It would be challenging for a student to remember where the last left off and the feeling is boring and repetition.</p> <p>Here is a sample of a simple of another Journey Map</p> <p></p> <p>Let's take a look at a few more of the design aspects of this map.  First you will note that we are attempting to use different colors and shapes for each lesson.  This lets the students know that these lessons are all different and exciting!  We also are bringing in various icons form the lessons to help students remember where they might have left off.</p>"},{"location":"journey-maps/#journey-map-templates","title":"Journey Map Templates","text":""},{"location":"journey-maps/#references","title":"References","text":"<ol> <li>Angela Stockman on K-12 Journey Maps</li> <li>Journey Maps on Standford K-12 Wiki</li> <li>Nielsen Norman Group on Journey Mapping</li> <li>Reader Rabbit created a  early demonstration of Journey Maps as a navigational aid to a PC-based game for learning to read. Reader Rabbit Reading 4-6 Full Walkthrough</li> </ol>"},{"location":"license/","title":"CoderDojo Twin Cities Content License","text":"<p>All content on CoderDojoTC websites are governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/3.0/</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul>"},{"location":"mentoring-best-practices/","title":"Mentoring Tips","text":"<p>Mentoring kids in coding is a rewarding experience that requires a thoughtful approach.  Here are some key pieces of advice to help volunteers be effective mentors:</p>"},{"location":"mentoring-best-practices/#things-to-do","title":"Things to Do","text":"<ol> <li>Tell the Kids if you are New:  If you are a new mentor, feel free to tell your student. Tell them that you write code every day but you have never taught a subject or taught a subject to a 10-year-old student.  Ask them if they would help you become a good mentor.</li> </ol> <p>Never feel you have to get the code perfect.  Reval in hard bugs and focus on teaching debugging skills.  Ask them of they have a theory about where the bug might be.</p> <ol> <li> <p>Understand their Goals: Ask them if they have any specific learning goals for your session.  Ask them if they have been to a CoderDojo session in the past and what they liked - or didn't like. Get them to describe their ideas and then help them achieve them.</p> </li> <li> <p>Understand their background:  Ask them if they have used the language before.  What did they learn?  What did they like?</p> </li> <li> <p>Start Slow and Listen:  Ask them about their feelings about how fast they learn.  Tell them that programming can sometimes get frustrating and it is OK to talk about these feelings. Patience is key. Understand that learning to code can be challenging,  and children may become frustrated or disinterested at times.  Show empathy and support to help them overcome these hurdles. Ensure a strong foundation by starting with basic concepts.  Use age-appropriate and engaging materials to teach fundamental principles before moving on to more complex topics.</p> </li> <li> <p>Understand Each Child's Learning Style: Every child learns differently.  Some may grasp concepts quickly, while others need more time and repetition.  Be patient and attentive to their individual learning styles and needs. Some kids like to work alone and some like to work in groups and see what other kids are doing.</p> </li> <li> <p>Foster a Safe and Encouraging Environment: Create an atmosphere where kids feel safe to ask questions,  make mistakes, and express themselves. Encouragement goes a long way in boosting their confidence and interest in coding.</p> </li> <li> <p>Make Learning Fun and Interactive: Coding can be made exciting through the use of LEDs, colors, motors and movement.  Use interactive projects that have fast feedback. Used RGB LEDs, LED strips, Trinket Turtle-Graphis and MicroSims. and hands-on activities. This approach helps maintain their interest and makes the learning process enjoyable. Focus on strategies that reduce feedback cycles.  Try to avoid long-compiled/upload times such as Arduino systems.</p> </li> <li> <p>Encourage Creativity and Experimentation: Allow children to experiment and be creative with their coding projects.  This not only enhances their problem-solving skills but also fosters a sense of ownership and pride in their work.</p> </li> <li> <p>Use Real-World Examples: Relate coding concepts to real-world applications.  This helps children understand the practical use of what they are learning and  can spark their interest in how technology impacts the world around them.</p> </li> </ol> <p>For example, ask them if they want to make a colorful costume with LED strips.</p> <ol> <li> <p>Encourage Teamwork and Collaboration: Promote collaborative projects where kids can work in teams.  This teaches them the importance of teamwork and communication in coding and software development. Studies show that kids learn the most when they build things together.  Project-based learning often shows the best results.</p> </li> <li> <p>Set Achievable Goals: Help children set realistic goals for their coding projects.  Achievable milestones can motivate them and give a sense of accomplishment.</p> </li> <li> <p>Provide Resources for Further Learning: Share resources like websites,  online courses, and books that can help children explore coding outside of your sessions. Ask them if they plan to return and give them a challenging problem to think about at the end of a session.</p> </li> <li> <p>Give Constructive Feedback: Provide feedback that is constructive and focuses on ways to improve.  Highlight their strengths and areas for improvement in a positive manner.</p> </li> </ol> <p>Remember, the goal is not only to teach coding but to inspire a lasting interest in technology and problem-solving. Your enthusiasm and commitment as a mentor can make a significant difference in their learning journey.</p>"},{"location":"mentoring-best-practices/#things-to-avoid","title":"Things to Avoid","text":"<ol> <li> <p>Try not to be judgemental about any idea.  Help them discover the pros and cons of different approaches to coding.</p> </li> <li> <p>Try not to take the keyboard away from the students.</p> </li> </ol>"},{"location":"resources/","title":"CoderDojo TC Mentor Resources","text":""},{"location":"resources/#for-mentors-designing-lesson-plans","title":"For Mentors Designing Lesson Plans","text":"<p>The Six Es of Lesson Planning</p>"},{"location":"resources/#kind-vs-wicked-learning-environments","title":"Kind vs. Wicked Learning Environments","text":"<p>When we design ciricculum for our CoderDojo students we are striving for a \"kind\" learning environment. Kind learning systems are contrasted to \"wicked\" Learning by the following concepts:</p> Kind Wicked Patterns repeat Patterns not obvious or repeating Feedback accurate and rapid Feedback delayed and inaccurate Rules well defined Rules unclear and incomplete <p>David Epstein TED Talk Starting at Kind vs Wicked Learning Envornments</p> <p>The Two Settings of Kind and Wicked Learning Environments - this article describes how we make a kind learning environment</p> <p>Mike Aponte Blog</p> <p>Robin Hogarth on Wikipedia</p>"},{"location":"rhizomatic-learning-theory/","title":"Rhizomatic Learning Theory","text":"<p> In pre-COVID CoderDojo classrooms we use a formal fixed curriculum based on static preprinted Concept Cards.  Concept Cards were colorful 4X5 laminated cards that students would view as they entered a classroom.  Unfortunately, with limited face-to-face interactions during the COVID pandemic, we are trying other more flexible ways of teaching and mentoring.</p> <p>One approach is to use a more network approach called Rhizomatic Learning that abandons fixed hierarchial structure with a more networked model that allows students to move from topic to topic as their interests takes them.</p> <p>Like any new pedagogical practice, the Rhizomatic Learning takes time to learn and support these structures in our content.</p>"},{"location":"rhizomatic-learning-theory/#advantages-of-rhizomatic-learning","title":"Advantages of Rhizomatic Learning","text":"<ol> <li>Allows participants to react to evolving circumstances</li> <li>Allows agile learning to practices to adapt to new goals</li> <li>Keeps attention high as students new discoveries change their interests</li> <li>Ideally suited content developed with web hyperlinks</li> </ol>"},{"location":"rhizomatic-learning-theory/#disadvantages-of-rhizomatic-learning","title":"Disadvantages of Rhizomatic Learning","text":"<ol> <li>Requires curriculum to be able to flow in a non-liner manner</li> <li>May require students to jump around in the content as they realize they don't have all the necessary knowledge to complete a task</li> </ol>"}]}