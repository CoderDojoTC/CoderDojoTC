{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the CoderDojo Twin Cities Mentor Resources web site! The purpose of this site is to give mentors guidance on the resources available for you to be a great mentor. The table of content is listed in the margins of the web site. Click on the left side links to navigate to the right section. Please let us know if you have any questions! Thanks! - The CoderDojo Twin Cities Mentoring Coordination Team","title":"Introduction"},{"location":"beginning-concepts/","text":"Computational thinking \u00b6 Computational thinking is one of the underlying patterns that guide the development of computer science curriculum. There are four key techniques (cornerstones) to computational thinking. We have to added the concept of explainability and bias to these concepts decomposition - breaking down a complex problem or system into smaller, more manageable parts pattern recognition \u2013 looking for similarities among and within problems abstraction \u2013 focusing on the important information only, ignoring irrelevant detail algorithms - developing a step-by-step solution to the problem, or the rules to follow to solve the problem explainability - can a computer explain why it took a specific action or made a specific recommendation? bias - is the result of the suggestion made by a computer skewed in a direction that makes it unfair to a group of people? Beginning Concepts \u00b6 Although we have many different coding groups that are appropriate for beginners, there are several computer science concepts that we encourage everyone to adopt in your coding group curriculum. Events - What events start a program? What events change the behavior of a program? Loops - How do repeat a set of tasks? Variables - How do we reference a common value and make our programs easier to change? Conditionals - How do we change program behavior based on rules. How do we use comparsions to do this? Functions - How do we group code sections together and give them names? Function Parameters - How do we pass values to functions. Why would we want to check the types of an input? Data types - What is the difference between a string of characters, an integer, a floating point number or a datetime? How do we use the right datatype and type checking to keep our programs reliable? Data Structures - How do you create and manage lists, dictionaries, arrays and complex data structures? Sensors - how do we gather input from the real world? Output - how do we display text or graphic output Feedback - how do we prompt users for input and respond to changes in output Debugging - how do we find problems in our code? Drawing - a great way to learn other concepts where you get quick visual feedback. An on ramp to charts and graphs. Recursion - what happens when a function calls itself? How can you draw trees that have many smaller branches? Commenting - how do we put hints in our code for others to better understand our code? Scople - Global vs. local variables and when should you use one over the other? Advanced concepts \u00b6 Here are a few topics that you can explore with your move advanced students. Files - How do we read data in from files and write data out to files? Regular Expressions - How do we use a short set of special characters to look for patterns. Integrated Development Environments - How do we setup our desktop so that we can be productive debugging our programs? What is syntax highlighting? What is autocomplete? Logging - How do we keep a record of what has happened in our programs? **","title":"Beginning Concepts"},{"location":"beginning-concepts/#computational-thinking","text":"Computational thinking is one of the underlying patterns that guide the development of computer science curriculum. There are four key techniques (cornerstones) to computational thinking. We have to added the concept of explainability and bias to these concepts decomposition - breaking down a complex problem or system into smaller, more manageable parts pattern recognition \u2013 looking for similarities among and within problems abstraction \u2013 focusing on the important information only, ignoring irrelevant detail algorithms - developing a step-by-step solution to the problem, or the rules to follow to solve the problem explainability - can a computer explain why it took a specific action or made a specific recommendation? bias - is the result of the suggestion made by a computer skewed in a direction that makes it unfair to a group of people?","title":"Computational thinking"},{"location":"beginning-concepts/#beginning-concepts","text":"Although we have many different coding groups that are appropriate for beginners, there are several computer science concepts that we encourage everyone to adopt in your coding group curriculum. Events - What events start a program? What events change the behavior of a program? Loops - How do repeat a set of tasks? Variables - How do we reference a common value and make our programs easier to change? Conditionals - How do we change program behavior based on rules. How do we use comparsions to do this? Functions - How do we group code sections together and give them names? Function Parameters - How do we pass values to functions. Why would we want to check the types of an input? Data types - What is the difference between a string of characters, an integer, a floating point number or a datetime? How do we use the right datatype and type checking to keep our programs reliable? Data Structures - How do you create and manage lists, dictionaries, arrays and complex data structures? Sensors - how do we gather input from the real world? Output - how do we display text or graphic output Feedback - how do we prompt users for input and respond to changes in output Debugging - how do we find problems in our code? Drawing - a great way to learn other concepts where you get quick visual feedback. An on ramp to charts and graphs. Recursion - what happens when a function calls itself? How can you draw trees that have many smaller branches? Commenting - how do we put hints in our code for others to better understand our code? Scople - Global vs. local variables and when should you use one over the other?","title":"Beginning Concepts"},{"location":"beginning-concepts/#advanced-concepts","text":"Here are a few topics that you can explore with your move advanced students. Files - How do we read data in from files and write data out to files? Regular Expressions - How do we use a short set of special characters to look for patterns. Integrated Development Environments - How do we setup our desktop so that we can be productive debugging our programs? What is syntax highlighting? What is autocomplete? Logging - How do we keep a record of what has happened in our programs? **","title":"Advanced concepts"},{"location":"code-groups/","text":"Which code group should you join? Scratch \u00b6 Scratch This is an ideal site if your students don't yet have strong keyboarding skills. For example can they use the copy/cut and paste functions without using the mouse? Scratch is a very popular block programming language supported by MIT. Students can build small programs just by placing blocks on the screen. You can learn more about scratch by visiting the MIT Scratch web site . Ages: 7-14 Python \u00b6 Python - If your student has strong keyboarding then we strongly recommend you start with Python. Python has been the most popular introductory programming language since 2014 because it is has a clean syntax and there are many tools especially designed for beginners. Our starting curriculum is based on the popular Trinket system used by many on-line coding clubs. Trinket is fully web-based and does not require any software to be installed. We also have many advanced Python labs and a gentle pathway to data literacy using Jupyter Notebooks. Ages: 10-18 Java \u00b6 Java - Java is suggested after students have mastered Python concepts. Getting started with Java is a bit more challenging since even small programs require more code and a deeper understanding of complex programming concepts. We are still working on finding instructors and materials for Java. Stand by for more. Ages: 14-18 Linux/UNIX and Pi \u00b6 Linux/UNIX and Raspberry Pi - Students that want to do work with the Raspberry Pi often need to understand basic UNIX commands and basic UNIX shell programming. We are working on putting these materials on line. Ages: 12-18 Web and User Experience \u00b6 Web and User Experience - Creating web pages is a fun way to learn how to build great user experiences. We are working on putting these materials on line. Ages: 10-18 App Inventor \u00b6 App Inventor Learn how to build your own mobile apps (Android only) with AppInventor, a powerful, visual programming tool from MIT. Ages: 12-18 Arduino \u00b6 Arduino - Want to control things in the real world through computer programming? In this group, you\u2019ll go step-by-step, wiring lights, sounds and sensors up through an Arduino board into a computer, then programming them to do cool things. No experience needed! Arduino Robots \u00b6 Arduino Robot Content yet to be moved: Arduino Robots Site Ages: 12-18 Arduino LED Costumes \u00b6 LED Strip labs GitHub Pages yet to be moved to mkdocs. Moving Rainbow Ages: 12-18 Unity Game Engine \u00b6 Unity Game Engine Enjoy making games and sophisticated graphics with professional level software. Best for ages 10+ or experienced younger coders. Ages: 12-18 AI Racing League \u00b6 AI Racing League - Learn the principals of machine learning and Artificial Intelligence by training a small car to drive around a track by itself. This popular project is build around the DonkeyCar system and our volunteers are working hard to make the cars easier for everyone to learn. Some experience with Python and UNIX is very helpful. Ages: 13-18","title":"Code Groups"},{"location":"code-groups/#scratch","text":"Scratch This is an ideal site if your students don't yet have strong keyboarding skills. For example can they use the copy/cut and paste functions without using the mouse? Scratch is a very popular block programming language supported by MIT. Students can build small programs just by placing blocks on the screen. You can learn more about scratch by visiting the MIT Scratch web site . Ages: 7-14","title":"Scratch"},{"location":"code-groups/#python","text":"Python - If your student has strong keyboarding then we strongly recommend you start with Python. Python has been the most popular introductory programming language since 2014 because it is has a clean syntax and there are many tools especially designed for beginners. Our starting curriculum is based on the popular Trinket system used by many on-line coding clubs. Trinket is fully web-based and does not require any software to be installed. We also have many advanced Python labs and a gentle pathway to data literacy using Jupyter Notebooks. Ages: 10-18","title":"Python"},{"location":"code-groups/#java","text":"Java - Java is suggested after students have mastered Python concepts. Getting started with Java is a bit more challenging since even small programs require more code and a deeper understanding of complex programming concepts. We are still working on finding instructors and materials for Java. Stand by for more. Ages: 14-18","title":"Java"},{"location":"code-groups/#linuxunix-and-pi","text":"Linux/UNIX and Raspberry Pi - Students that want to do work with the Raspberry Pi often need to understand basic UNIX commands and basic UNIX shell programming. We are working on putting these materials on line. Ages: 12-18","title":"Linux/UNIX and  Pi"},{"location":"code-groups/#web-and-user-experience","text":"Web and User Experience - Creating web pages is a fun way to learn how to build great user experiences. We are working on putting these materials on line. Ages: 10-18","title":"Web and User Experience"},{"location":"code-groups/#app-inventor","text":"App Inventor Learn how to build your own mobile apps (Android only) with AppInventor, a powerful, visual programming tool from MIT. Ages: 12-18","title":"App Inventor"},{"location":"code-groups/#arduino","text":"Arduino - Want to control things in the real world through computer programming? In this group, you\u2019ll go step-by-step, wiring lights, sounds and sensors up through an Arduino board into a computer, then programming them to do cool things. No experience needed!","title":"Arduino"},{"location":"code-groups/#arduino-robots","text":"Arduino Robot Content yet to be moved: Arduino Robots Site Ages: 12-18","title":"Arduino Robots"},{"location":"code-groups/#arduino-led-costumes","text":"LED Strip labs GitHub Pages yet to be moved to mkdocs. Moving Rainbow Ages: 12-18","title":"Arduino LED Costumes"},{"location":"code-groups/#unity-game-engine","text":"Unity Game Engine Enjoy making games and sophisticated graphics with professional level software. Best for ages 10+ or experienced younger coders. Ages: 12-18","title":"Unity Game Engine"},{"location":"code-groups/#ai-racing-league","text":"AI Racing League - Learn the principals of machine learning and Artificial Intelligence by training a small car to drive around a track by itself. This popular project is build around the DonkeyCar system and our volunteers are working hard to make the cars easier for everyone to learn. Some experience with Python and UNIX is very helpful. Ages: 13-18","title":"AI Racing League"},{"location":"code-of-conduct/","text":"Contributor Covenant Code of Conduct \u00b6 Our Pledge \u00b6 We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards \u00b6 Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities \u00b6 Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope \u00b6 This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement \u00b6 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines \u00b6 Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction \u00b6 Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning \u00b6 Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban \u00b6 Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban \u00b6 Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the project community. Attribution \u00b6 This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Code of Conduct"},{"location":"code-of-conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code-of-conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"code-of-conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code-of-conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"code-of-conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"code-of-conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"code-of-conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"code-of-conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"code-of-conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"code-of-conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the project community.","title":"4. Permanent Ban"},{"location":"code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"contact/","text":"To contact us please send an e-mail to: hello@coderdojotc.org","title":"Contact Us"},{"location":"content-authoring-guide/","text":"We use Markdown for all our content. A good way to learn Markdown is to use a Markdown cheat sheet . We want you to put many images into your classes so make sure to use the image links! We use GitHub to store our content. GitHub is free for all public content and has many advanced features that allow team to work together to build and test learning content. Many of our content authors are familiar with GitHub. We use GitHub Pages to publish our content to microsites. Each coding group has their own microsite and search does not currently work across the microsites (we are working on fixing this). All content should be published into a gh-deploy branch. If you change content using the web-based editor (the pencil in the upper right corner of the github page viewer - you may need to have a friend help republish the content to the GitHub Pages site.) We use mkdocs for our publishing tool. To deploy mkdocs you will need to have python installed on your local computer. You must run the \"mkdocs gh-deploy\" command every time you make changes. We use the mkdocs material theme . We encourage you to learn to add custom material widgets to your content. We use CoderDojo style guide for our colors, icons and fonts. Please try to stay close to these guidelines so that mentors, parents, and students all know they are on a kid-safe site. Try to avoid links to resources that are not kid-safe. By using these standards it will enable us to reuse this content for search, recommendation and building tools that allow students to use chatbots to help them code. Images \u00b6 All images should be stored in the doc/img directory in your site. Please keep images reasonably small (under 50K) to keep the load times fast. Navigation \u00b6 Make sure when you add a new content file you link it into the navigation menu. Try to keep navigation lists under 30 items. Try using nesting if your lists get too long. 1 Thanks! - The CoderDojo Twin Cities Mentoring Coordination Team Mkdocs commands \u00b6 There are only four mkdocs commands: build Build the MkDocs documentation. We use this to test at the nav pages all match a document. gh-deploy Deploy your documentation to GitHub Pages. Run this when you want to take your local changes and push them to the web site. new Create a new MkDocs project. Most of our mentors will not need to do this. We will supply you with a template zip file with all the right content if you need to create a new CoderDojo microsite of your own. serve Run the builtin development server and display the web site on your local computer. This is a great way to quickly check your changes since the server watches for any file changes and immediately updates the web page. Material examples \u00b6 We chose the Google Material theme because there are tens of thousands of components you can add to your pages. You can get a sample of them here: Material Components","title":"Content Authoring Guide"},{"location":"content-authoring-guide/#images","text":"All images should be stored in the doc/img directory in your site. Please keep images reasonably small (under 50K) to keep the load times fast.","title":"Images"},{"location":"content-authoring-guide/#navigation","text":"Make sure when you add a new content file you link it into the navigation menu. Try to keep navigation lists under 30 items. Try using nesting if your lists get too long. 1 Thanks! - The CoderDojo Twin Cities Mentoring Coordination Team","title":"Navigation"},{"location":"content-authoring-guide/#mkdocs-commands","text":"There are only four mkdocs commands: build Build the MkDocs documentation. We use this to test at the nav pages all match a document. gh-deploy Deploy your documentation to GitHub Pages. Run this when you want to take your local changes and push them to the web site. new Create a new MkDocs project. Most of our mentors will not need to do this. We will supply you with a template zip file with all the right content if you need to create a new CoderDojo microsite of your own. serve Run the builtin development server and display the web site on your local computer. This is a great way to quickly check your changes since the server watches for any file changes and immediately updates the web page.","title":"Mkdocs commands"},{"location":"content-authoring-guide/#material-examples","text":"We chose the Google Material theme because there are tens of thousands of components you can add to your pages. You can get a sample of them here: Material Components","title":"Material examples"},{"location":"designing-concept-cards/","text":"Dan McCreary Version 1.1 \u2013 last updated September, 2019 What are Concept Cards? \u00b6 Concept cards are teaching tools that are popular in informal hands-on settings. Concept cards follow the rule \"one concept per card\". They are also called \"Sushi Cards\" in the CoderDojo mentoring system, representing a single bite of knowledge. Concepts are communicated in easy-to-digest, bite-sized chunks (hence Sushi). When should they be used? \u00b6 Concept Cards are ideal for situations where students may not have one-on-one time with a teacher or mentor This is a somewhat self-guided instruction without having to pick up a 300-page book where you have to start on page one. Think of them as \"Agile Teaching\" tools where there are multiple entry points into learning and the requirements of your students may be constantly changing. If designed correctly, concepts cards allow you to remix concepts to adapt to different students, projects and educational events. Design goals \u00b6 Breaking complex topics down into many small concepts is a universal strategy in designing any curriculum. We often call this process decomposition. Having a good set of concepts can promote building flexible data structures that are used in learning management systems. Sometimes designing a graph of interrelated concepts is a first step in building these systems. Once you have a hierarchy of concepts with their dependencies you can then focus on designing the content to teach these concepts. Guideline 1: One Card, One Concept Each concept card should teach one important concept. What is an important concept? That's the tricky bit \u2013 and that's for the card designer to decide. There is no scientific way of defining this! Sometimes a Concept can be associated with a specific physical demonstration like \"What is a Raspberry Pi computer?\" Sometimes they are associated with a program, like the UNIX shell command, and sometimes Concept Cards are associated with a programming concept like an if/then statement or a for a loop. (a for a? not sure if this is correct) Ideally, Concept Cards should be related to a piece of hardware, a program, a function and sample code that illustrates the principle as simply and clearly as possible. Don't be tempted to add in 'side' lessons that show something else. Instead, make these into separate cards. Side concepts may be interesting to you, but you must resist the temptation to deviate from the concept. Types of Concept Cards \u00b6 Concept cards are often divided into multiple difficulty levels like the following: Beginning - where a concept does not depend on any other concepts in your curriculum Intermediate - where a concept might depend on one or more Beginning concept Advanced - where a concept depends on one or more intermediate concepts Designing Colorful Laminated Concept Cards \u00b6 Like many communication tools, remember that the medium is the message. Concept cards are often colorful two-sided laminated cards that are easy to hold in one hand and easy to view by the side of a computer. The structure of the cards is important because they don't look intimidating. We want them to look a bit like a stack of playing cards, not a 1,000 page college textbook. Learners can move at their own pace and there is never the suggestion that only those patient enough to read a 300 page textbook are allowed to participate. You can easily place the card next to a piece of hardware or laptop. For instance, if they\u2019re learning UNIX, they\u2019ll probably have three or four windows open \u2013 so having another open to show the class notes is contributing to serious window management problems. Lamination \u2013 lamination will save you time and money. Laminators cost around $50. The individual laminating pouches are less than 10 cents each. Once you\u2019ve produced your laminated sheet it will last for many weeks of Dojo sessions, in contrast to paper handouts which are usually discarded after one or two Dojos. Test, test, test (practice-led, not theory-led) Because every audience is different, you can't really predict if cards will work for any audience. The approach is practice-led rather than theory-led so that learners see results as fast as possible. We think this mirrors the way most programmers learn anyway. (First, take some existing code and hack it, read up the theory only if you can\u2019t figure out what\u2019s going on \u2026) Keep examples short and sweet Any example code should be as short as possible (to minimize mistyping) and should be as easy to understand as possible \u2013 make examples as concrete as you can. Using self-descriptive variable and parameter names is helpful (good programming anyway). Don\u2019t feel you have to explain everything Don't feel you have to explain everything \u2013 it's often better to show some self-descriptive code and then ask the learner the question 'can you figure out what this is doing?' or 'how would you change this to do X'. You\u2019re pointing learners in the right direction, but you're not watching over them for the whole journey. Also \u2026 improvisation should be encouraged. Learning examples should be presented in such a way that the learner can riff on the examples and quickly produce new materials that showcase their own interests. Cards should be self-contained Although the lessons should be built on one another, individual cards should still be fairly self-contained. In the HTML example it's necessary to do the first two or three cards in order, but after the learner has created a basic site card it could be picked up in any order. (Although to make this work, you may need to revisit earlier cards after you add in a later card). Pictures are good Having the materials look inviting is important. The best practice is to have a friendly, not-too-complex, yet colorful picture at the top of each card just below the concept name. We try to show an end-result that looks exciting and makes learners want to dive in. Try to avoid having English in your pictures due to hassle made when translating to other languages. The cards will never be perfect \u2013 don\u2019t worry! Whenever you work with learners and use the cards, you\u2019ll quickly come across all sorts of errors, imperfections and barriers to comprehension. But don\u2019t worry about it. It\u2019s normal. Just go home and modify them. Each change you make will make the cards easier to use. Sample Structure * Front Material Difficulty - the outer border of the card should show the difficulty level using a bright color. We use green for beginning concepts, blue for intermediate concepts and black for advanced concepts. Also use text because some students may be color blind. Concept Name - try to use a short kid-friendly name and avoid technical jargon if possible Concept Picture - a small image or icon that students will remember if they have seen it before. Imagine students all arriving in a room and quickly discarding cards they have already done but putting their focus on new concept cards. Activity Challenge - A short list of activities that the students might try. Give them hints at the very bottom of the card if they are hard challenges. * Back Material Activity Answers - A short list answer to the challenges on the front of the card Explorations - More ways to learn more about a concept or related Concepts Design Tips \u00b6 Use colors and paragraphs to prevent a \"wall of text\" that will turn students away. Put in a colorful icon in the text or use bold/italic or colors to highlight words. Large blocks of text can be intimidating to readers and tough to read for all. Look at the examples for reference for a good sushi card in terms of text readability. Visit http://dojo.soy/style for guidelines to aim for. You can remind them to ask for a mentor if installing something is too hard Add important Terms in colored boxes Historic tips are welcome, fun facts too Bold terms like copy, paste, click, keyboard buttons etc. (any words that's used a lot and has either been defined or is common computing terms) Instructions should work for both PC and Mac Appropriately colored boxes break the wall of texts and make the text less daunting. There should be at least one yellow box or screenshot on each page. Use this to explain key concepts in simple language. Always try to end the back of a card with play around with other challenges. i.e. making music with a Raspberry Pi, a game in Python, a webpage in HTML/CSS. Encourage them to tweak and explore what they've done. Needless to say, a child will not understand a lot of big words. Use basic language and don't make a comparison to something they wouldn't understand like a bank or job Test your card by watching kids pick them up and try them. Don't try for perfection on the first pass. Get it out there and iterate, iterate, iterate... Get feedback from other mentors and teachers * Sample Concept Form: Concept Level: Beginner, Intermediate or Advanced Concept Name: _ _ _ _ _ Concept Picture: Concept Description: Optional: Predecessor Concepts Successor Concepts Activity Challenge Text: Concept Answers (often printed on the back of the card) More to Explore:","title":"Designing Concept Cards"},{"location":"designing-concept-cards/#what-are-concept-cards","text":"Concept cards are teaching tools that are popular in informal hands-on settings. Concept cards follow the rule \"one concept per card\". They are also called \"Sushi Cards\" in the CoderDojo mentoring system, representing a single bite of knowledge. Concepts are communicated in easy-to-digest, bite-sized chunks (hence Sushi).","title":"What are Concept Cards?"},{"location":"designing-concept-cards/#when-should-they-be-used","text":"Concept Cards are ideal for situations where students may not have one-on-one time with a teacher or mentor This is a somewhat self-guided instruction without having to pick up a 300-page book where you have to start on page one. Think of them as \"Agile Teaching\" tools where there are multiple entry points into learning and the requirements of your students may be constantly changing. If designed correctly, concepts cards allow you to remix concepts to adapt to different students, projects and educational events.","title":"When should they be used?"},{"location":"designing-concept-cards/#design-goals","text":"Breaking complex topics down into many small concepts is a universal strategy in designing any curriculum. We often call this process decomposition. Having a good set of concepts can promote building flexible data structures that are used in learning management systems. Sometimes designing a graph of interrelated concepts is a first step in building these systems. Once you have a hierarchy of concepts with their dependencies you can then focus on designing the content to teach these concepts. Guideline 1: One Card, One Concept Each concept card should teach one important concept. What is an important concept? That's the tricky bit \u2013 and that's for the card designer to decide. There is no scientific way of defining this! Sometimes a Concept can be associated with a specific physical demonstration like \"What is a Raspberry Pi computer?\" Sometimes they are associated with a program, like the UNIX shell command, and sometimes Concept Cards are associated with a programming concept like an if/then statement or a for a loop. (a for a? not sure if this is correct) Ideally, Concept Cards should be related to a piece of hardware, a program, a function and sample code that illustrates the principle as simply and clearly as possible. Don't be tempted to add in 'side' lessons that show something else. Instead, make these into separate cards. Side concepts may be interesting to you, but you must resist the temptation to deviate from the concept.","title":"Design goals"},{"location":"designing-concept-cards/#types-of-concept-cards","text":"Concept cards are often divided into multiple difficulty levels like the following: Beginning - where a concept does not depend on any other concepts in your curriculum Intermediate - where a concept might depend on one or more Beginning concept Advanced - where a concept depends on one or more intermediate concepts","title":"Types of Concept Cards"},{"location":"designing-concept-cards/#designing-colorful-laminated-concept-cards","text":"Like many communication tools, remember that the medium is the message. Concept cards are often colorful two-sided laminated cards that are easy to hold in one hand and easy to view by the side of a computer. The structure of the cards is important because they don't look intimidating. We want them to look a bit like a stack of playing cards, not a 1,000 page college textbook. Learners can move at their own pace and there is never the suggestion that only those patient enough to read a 300 page textbook are allowed to participate. You can easily place the card next to a piece of hardware or laptop. For instance, if they\u2019re learning UNIX, they\u2019ll probably have three or four windows open \u2013 so having another open to show the class notes is contributing to serious window management problems. Lamination \u2013 lamination will save you time and money. Laminators cost around $50. The individual laminating pouches are less than 10 cents each. Once you\u2019ve produced your laminated sheet it will last for many weeks of Dojo sessions, in contrast to paper handouts which are usually discarded after one or two Dojos. Test, test, test (practice-led, not theory-led) Because every audience is different, you can't really predict if cards will work for any audience. The approach is practice-led rather than theory-led so that learners see results as fast as possible. We think this mirrors the way most programmers learn anyway. (First, take some existing code and hack it, read up the theory only if you can\u2019t figure out what\u2019s going on \u2026) Keep examples short and sweet Any example code should be as short as possible (to minimize mistyping) and should be as easy to understand as possible \u2013 make examples as concrete as you can. Using self-descriptive variable and parameter names is helpful (good programming anyway). Don\u2019t feel you have to explain everything Don't feel you have to explain everything \u2013 it's often better to show some self-descriptive code and then ask the learner the question 'can you figure out what this is doing?' or 'how would you change this to do X'. You\u2019re pointing learners in the right direction, but you're not watching over them for the whole journey. Also \u2026 improvisation should be encouraged. Learning examples should be presented in such a way that the learner can riff on the examples and quickly produce new materials that showcase their own interests. Cards should be self-contained Although the lessons should be built on one another, individual cards should still be fairly self-contained. In the HTML example it's necessary to do the first two or three cards in order, but after the learner has created a basic site card it could be picked up in any order. (Although to make this work, you may need to revisit earlier cards after you add in a later card). Pictures are good Having the materials look inviting is important. The best practice is to have a friendly, not-too-complex, yet colorful picture at the top of each card just below the concept name. We try to show an end-result that looks exciting and makes learners want to dive in. Try to avoid having English in your pictures due to hassle made when translating to other languages. The cards will never be perfect \u2013 don\u2019t worry! Whenever you work with learners and use the cards, you\u2019ll quickly come across all sorts of errors, imperfections and barriers to comprehension. But don\u2019t worry about it. It\u2019s normal. Just go home and modify them. Each change you make will make the cards easier to use. Sample Structure * Front Material Difficulty - the outer border of the card should show the difficulty level using a bright color. We use green for beginning concepts, blue for intermediate concepts and black for advanced concepts. Also use text because some students may be color blind. Concept Name - try to use a short kid-friendly name and avoid technical jargon if possible Concept Picture - a small image or icon that students will remember if they have seen it before. Imagine students all arriving in a room and quickly discarding cards they have already done but putting their focus on new concept cards. Activity Challenge - A short list of activities that the students might try. Give them hints at the very bottom of the card if they are hard challenges. * Back Material Activity Answers - A short list answer to the challenges on the front of the card Explorations - More ways to learn more about a concept or related Concepts","title":"Designing Colorful Laminated Concept Cards"},{"location":"designing-concept-cards/#design-tips","text":"Use colors and paragraphs to prevent a \"wall of text\" that will turn students away. Put in a colorful icon in the text or use bold/italic or colors to highlight words. Large blocks of text can be intimidating to readers and tough to read for all. Look at the examples for reference for a good sushi card in terms of text readability. Visit http://dojo.soy/style for guidelines to aim for. You can remind them to ask for a mentor if installing something is too hard Add important Terms in colored boxes Historic tips are welcome, fun facts too Bold terms like copy, paste, click, keyboard buttons etc. (any words that's used a lot and has either been defined or is common computing terms) Instructions should work for both PC and Mac Appropriately colored boxes break the wall of texts and make the text less daunting. There should be at least one yellow box or screenshot on each page. Use this to explain key concepts in simple language. Always try to end the back of a card with play around with other challenges. i.e. making music with a Raspberry Pi, a game in Python, a webpage in HTML/CSS. Encourage them to tweak and explore what they've done. Needless to say, a child will not understand a lot of big words. Use basic language and don't make a comparison to something they wouldn't understand like a bank or job Test your card by watching kids pick them up and try them. Don't try for perfection on the first pass. Get it out there and iterate, iterate, iterate... Get feedback from other mentors and teachers * Sample Concept Form: Concept Level: Beginner, Intermediate or Advanced Concept Name: _ _ _ _ _ Concept Picture: Concept Description: Optional: Predecessor Concepts Successor Concepts Activity Challenge Text: Concept Answers (often printed on the back of the card) More to Explore:","title":"Design Tips"},{"location":"mentoring-best-practices/","text":"If you are a new mentor, feel free to tell your student. Tell them that you write code every day but you have never taught a subject or taught a subject to a 10-year-old student. Ask them if they would help you become a good mentor. Ask them if they have any specific learning goals. Ask them if they have used the language before. What did they learn? What did they like? Start slow and listen to their feedback. Ask them about their feelings. Tell them that programming can sometimes get frustrating and it is OK to talk about theses feelings.","title":"Mentoring Best Practices"}]}